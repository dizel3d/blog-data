#Проектирование правильного RESTful API

Это вольный перевод статьи: http://devo.ps/blog/2013/03/22/designing-a-restful-api-that-doesn-t-suck.html

В своей статье Ronan Berder дает сжатый набор правил, которые они дают новым разработчикам в их команде.

* Проектируйте API в первую очередь для разработчиков, это они главные пользователи. Он должен быть простой и интуитивно понятный.

* Используйте HTTP методы (http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods), вместо параметров запроса (?action=create). Список методов: 
```
  POST для создания  
  GET для чтения  
  DELETE для удаления  
  PUT для обновления
```

* Используйте HTTP статусы (http://en.wikipedia.org/wiki/List_of_HTTP_status_codes), особенно для ошибок (необходимость аутентификации, ошибки на стороне сервера, неверные параметры)... Вы можете выбирать из:
```
  200: OK  
  201: Created  
  304: Not Modified  
  400: Bad Request  
  401: Unauthorized  
  403: Forbidden  
  404: Not Found  
  500: Internal Server Error
```

* Простые URL'ы для доступа к ресурсам: сначала название типа сущностей, далее идентификатор сущности. Для примера /emails и /emails/1234, где первый отдает коллекцию, а второй конкретную сущность.

* Используйте глаголы для описания действия, например: /search?q=my+keywords.

* Бросайте простые, но информативные ошибки (при этом используя статус код). Например: { message: "Something terribly wrong happened" } и статус 401 если запрос требует аутентификации. Так же логгируйте как можно больше подробной информации на серверной стороне для упрощения процесса дебага.

Советы по использованию методов и статусов уже должны улучшить ваше API. Но есть еще не менее важные советы:

* Первым делом поддержать JSON, а уже потом другие форматы.
* Используйте Unix time (http://en.wikipedia.org/wiki/Unix_time) 
* Дополнйте ваш URL версией API /v1/emails/1234
* Используйте нижний регистр
