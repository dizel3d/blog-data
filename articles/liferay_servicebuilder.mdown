# Liferay Service Builder

Иногда стандартной схемы данных Liferay бывает недостаточно. И вам надо расширить ее своими таблицами. Для этого есть ServiceBuilder. 
ServiceBuilder это средство для автоматической генерации интерфейсов и классов собственного сервиса.

Первым делом поставим задачу. Давайте напишем портлет - гостевую книгу, и хоть это понятие давно устарело, данный пример можно будет расширить под что-то более полезное. 
Данный портлет будет выполнять следующие функции:
* Отображение всех сообщений
* Добавление новых сообщений

Для простоты интерфейс мы сделаем на Vaadin. Как настроить и создать простой портлет, я рассказал в [этой статье](http://dimafeng.ru/show/lifera_plus_vaadin).

## ServiceBuilder

Первым делом опишем модель данных. Для хранения сообщения нам нужна таблица, которая будет содержать:
* Текст сообщения
* Дату сообщения
* Идентификатор пользователя

Теперь перейдем к созданию портлета (почитать можно [тут](http://dimafeng.ru/show/lifera_plus_vaadin)). Далее правый клик на дереве проекта -> New -> Other

![liferay servicebuilder](https://raw.github.com/dimafeng/blog-data/master/articles/liferay_servicebuilder/1.png)

Заполняем поля, как показано на скриншоте

![liferay servicebuilder](https://raw.github.com/dimafeng/blog-data/master/articles/liferay_servicebuilder/2.png)

После этого должен появится файл *docroot/WEB-INF/service.xml*. Откроем его в режиме source и исправим содержимое на следующее:

```xml
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE service-builder PUBLIC "-//Liferay//DTD Service Builder 6.1.0//EN" "http://www.liferay.com/dtd/liferay-service-builder_6_1_0.dtd">
	<service-builder package-path="ru.dimafeng.ads">
		<author>dimafeng</author>
		<namespace>ADS</namespace>

		<entity name="Message" local-service="true" remote-service="false">

			<column name="messageId" type="long" primary="true" />
			<column name="userId" type="long" />
			<column name="createDate" type="Date" />
			<column name="content" type="String" />

			<!-- Order -->

			<order by="asc">
				<order-column name="messageId" />
			</order>

			<!-- Finder methods -->

			<finder name="U" return-type="Collection">
				<finder-column name="userId" />
			</finder>
		</entity>
	</service-builder>
```

Данный xml описывает нашу модель данных, по ней будет создана сущьность Message, hibernate-маппинг, сервис и все вспомогательные классы. 

Строчки ниже создают индекс на колонку userId

```
	<finder name="U" return-type="Collection">
		<finder-column name="userId" />
	</finder>
```

Теперь перетащите build.xml на отоброжение Ant

![liferay servicebuilder](https://raw.github.com/dimafeng/blog-data/master/articles/liferay_servicebuilder/3.png)

И выполните таску *build-service*, после завершения, обновите дерево проекта. Вы должны увидеть примерно следующую структуру:

![liferay servicebuilder](https://raw.github.com/dimafeng/blog-data/master/articles/liferay_servicebuilder/4.png)

Теперь приступим к написанию логики сервиса. Вся логика располагается в классе MessageLocalServiceImpl. 

```java
	package ru.dimafeng.ads.service.impl;

	import java.util.Date;
	import java.util.List;

	import ru.dimafeng.ads.AdsApplication;
	import ru.dimafeng.ads.model.Message;
	import ru.dimafeng.ads.service.base.MessageLocalServiceBaseImpl;

	import com.liferay.portal.kernel.exception.SystemException;
	import com.liferay.portal.kernel.log.Log;
	import com.liferay.portal.kernel.log.LogFactoryUtil;
	import com.liferay.portal.kernel.util.HtmlUtil;

	public class MessageLocalServiceImpl extends MessageLocalServiceBaseImpl {

		private static Log _log = LogFactoryUtil
				.getLog(MessageLocalServiceImpl.class);

		public Message addMessage(long userId, String content)
				throws SystemException {
			try {
				long entryId = counterLocalService.increment();

				Message message = messagePersistence.create(entryId);
				message.setCreateDate(new Date());
				message.setUserId(userId);
				message.setContent(HtmlUtil.escape(content));

				messagePersistence.update(message, false);
				
				return message;
			} catch (Exception e) {
				_log.fatal(e.getMessage(), e);
				throw new SystemException(e);
			}
		}

		public List<Message> getMessages(int start, int end) throws SystemException {
			return messagePersistence.findAll(start, end);
		}
	}
```

После этого надо сново выполнить таску *build-service*, чтобы сгенерировать все вспомогательные классы и обновить проект. 
Теперь перейдем к созданию интерфейса. Откроем AdsApplication.java.

```java
	package ru.dimafeng.ads;

	import java.text.DateFormat;
	import java.text.SimpleDateFormat;

	import javax.portlet.PortletRequest;
	import javax.portlet.PortletResponse;

	import ru.dimafeng.ads.model.Message;
	import ru.dimafeng.ads.service.MessageLocalServiceUtil;

	import com.liferay.portal.kernel.exception.PortalException;
	import com.liferay.portal.kernel.exception.SystemException;
	import com.liferay.portal.kernel.log.Log;
	import com.liferay.portal.kernel.log.LogFactoryUtil;
	import com.liferay.portal.model.User;
	import com.liferay.portal.service.UserLocalServiceUtil;
	import com.liferay.portal.util.PortalUtil;
	import com.vaadin.Application;
	import com.vaadin.terminal.gwt.server.PortletRequestListener;
	import com.vaadin.ui.Button;
	import com.vaadin.ui.Button.ClickEvent;
	import com.vaadin.ui.Button.ClickListener;
	import com.vaadin.ui.HorizontalLayout;
	import com.vaadin.ui.Label;
	import com.vaadin.ui.TextField;
	import com.vaadin.ui.VerticalLayout;
	import com.vaadin.ui.Window;
	import com.vaadin.ui.Window.Notification;

	@SuppressWarnings("serial")
	public class AdsApplication extends Application implements PortletRequestListener {

		private static Log _log = LogFactoryUtil.getLog(AdsApplication.class);

		private static final String DATE_FORMAT = "dd MM yyyy hh:mm";
		
		private VerticalLayout mainLayout = new VerticalLayout();
		private Window window = new Window();
		
		public void init() {
			setMainWindow(window);
			
			window.addComponent(mainLayout);
			window.setSizeFull();
			mainLayout.setSizeFull();
			mainLayout.setSpacing(true);
			refreshUI();
		}
		
		private void refreshUI() {
			final DateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT); 
			
			mainLayout.removeAllComponents();
			
			mainLayout.addComponent(new Button("Обновить", new ClickListener() {
				
				@Override
				public void buttonClick(ClickEvent event) {
					refreshUI();
				}
			}));
			
			if (getUser() != null) {
				final TextField content = new TextField();
				Button submit = new Button("Отправить", new ClickListener() {

					@Override
					public void buttonClick(ClickEvent event) {
						try {
							MessageLocalServiceUtil.addMessage(((User) getUser())
									.getUserId(), content.getValue().toString());
							refreshUI();
						} catch (Exception e) {
							_log.fatal(e.getMessage(), e);
							window.showNotification("Ошибка",
									e.getLocalizedMessage(),
									Notification.TYPE_ERROR_MESSAGE);
						}
					}
				});

				HorizontalLayout hl = new HorizontalLayout();
				
				hl.addComponent(content);
				hl.addComponent(submit);
				
				mainLayout.addComponent(hl);
			}
			
			try {
				for (Message m : MessageLocalServiceUtil.getMessages(0,
						Integer.MAX_VALUE)) {
					Label messageLabel = new Label();
					messageLabel.setContentMode(Label.CONTENT_XHTML);
					User user = null;
					try {
						user = UserLocalServiceUtil.getUser(m.getUserId());
					} catch (PortalException e) {
						_log.fatal(e);
					}
					
					StringBuilder sb = new StringBuilder();
					sb.append("<h1>");
					sb.append(user!=null?user.getFullName():"Неизвестный");
					sb.append(" написал</h1> ");
					if(m.getCreateDate()!=null) { 
						sb.append(dateFormat.format(m.getCreateDate()));
					}
					sb.append("<br/>");
					sb.append(m.getContent());
					
					messageLabel.setValue(sb.toString());
					
					mainLayout.addComponent(messageLabel);
				}
			} catch (SystemException e) {
				_log.fatal(e.getMessage(), e);
				window.showNotification("Ошибка", e.getLocalizedMessage(),
						Notification.TYPE_ERROR_MESSAGE);
			}
		}

		@Override
		public void onRequestStart(PortletRequest request, PortletResponse response) {
			_log.info(request);
			User user = null;
			try {
				user = PortalUtil.getUser(request);
			} catch (Exception ex) {
				_log.fatal(ex);
			}

			if (getUser() == null || !getUser().equals(user)) {
				setUser(user);
				refreshUI();
			}
		}

		@Override
		public void onRequestEnd(PortletRequest request, PortletResponse response) {
			
		}

	}
```

Теперь деплоим портлет по инструкция прошлой статьи.

![liferay servicebuilder](https://raw.github.com/dimafeng/blog-data/master/articles/liferay_servicebuilder/5.png)
